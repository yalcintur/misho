  0%|                                                                                                                                     | 0/10 [00:00<?, ?it/s]Traceback (most recent call last):
  File "run.py", line 18, in <module>
    finetune_policy(train_config)
  File "/home/weh4401/st/misho/finetuning/finetune_policy.py", line 56, in finetune_policy
    trainer.train()
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/trl/trainer/sft_trainer.py", line 434, in train
    output = super().train(*args, **kwargs)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/transformers/trainer.py", line 2123, in train
    return inner_training_loop(
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/transformers/trainer.py", line 2481, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/transformers/trainer.py", line 3579, in training_step
    loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/transformers/trainer.py", line 3633, in compute_loss
    outputs = model(**inputs)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/data_parallel.py", line 176, in forward
    inputs, module_kwargs = self.scatter(inputs, kwargs, self.device_ids)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/data_parallel.py", line 198, in scatter
    return scatter_kwargs(inputs, kwargs, device_ids, dim=self.dim)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/scatter_gather.py", line 78, in scatter_kwargs
    scattered_kwargs = scatter(kwargs, target_gpus, dim) if kwargs else []
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/scatter_gather.py", line 64, in scatter
    res = scatter_map(inputs)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/scatter_gather.py", line 55, in scatter_map
    return [type(obj)(i) for i in zip(*map(scatter_map, obj.items()))]
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/scatter_gather.py", line 51, in scatter_map
    return list(zip(*map(scatter_map, obj)))
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/scatter_gather.py", line 47, in scatter_map
    return Scatter.apply(target_gpus, None, dim, obj)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/autograd/function.py", line 574, in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/_functions.py", line 96, in forward
    outputs = comm.scatter(input, target_gpus, chunk_sizes, ctx.dim, streams)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/comm.py", line 188, in scatter
    return tuple(torch._C._scatter(tensor, devices, chunk_sizes, dim, streams))
RuntimeError: chunk expects at least a 1-dimensional tensor
Traceback (most recent call last):
  File "run.py", line 18, in <module>
    finetune_policy(train_config)
  File "/home/weh4401/st/misho/finetuning/finetune_policy.py", line 56, in finetune_policy
    trainer.train()
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/trl/trainer/sft_trainer.py", line 434, in train
    output = super().train(*args, **kwargs)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/transformers/trainer.py", line 2123, in train
    return inner_training_loop(
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/transformers/trainer.py", line 2481, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/transformers/trainer.py", line 3579, in training_step
    loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/transformers/trainer.py", line 3633, in compute_loss
    outputs = model(**inputs)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/data_parallel.py", line 176, in forward
    inputs, module_kwargs = self.scatter(inputs, kwargs, self.device_ids)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/data_parallel.py", line 198, in scatter
    return scatter_kwargs(inputs, kwargs, device_ids, dim=self.dim)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/scatter_gather.py", line 78, in scatter_kwargs
    scattered_kwargs = scatter(kwargs, target_gpus, dim) if kwargs else []
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/scatter_gather.py", line 64, in scatter
    res = scatter_map(inputs)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/scatter_gather.py", line 55, in scatter_map
    return [type(obj)(i) for i in zip(*map(scatter_map, obj.items()))]
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/scatter_gather.py", line 51, in scatter_map
    return list(zip(*map(scatter_map, obj)))
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/scatter_gather.py", line 47, in scatter_map
    return Scatter.apply(target_gpus, None, dim, obj)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/autograd/function.py", line 574, in apply
    return super().apply(*args, **kwargs)  # type: ignore[misc]
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/_functions.py", line 96, in forward
    outputs = comm.scatter(input, target_gpus, chunk_sizes, ctx.dim, streams)
  File "/home/weh4401/medtranslation/3d-vae/3dvae-train/lama/lib/python3.8/site-packages/torch/nn/parallel/comm.py", line 188, in scatter
    return tuple(torch._C._scatter(tensor, devices, chunk_sizes, dim, streams))
RuntimeError: chunk expects at least a 1-dimensional tensor
